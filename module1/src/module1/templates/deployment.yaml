apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    # Koppelt service aan dit label
    app: module-deployment
  name: module-deployment
spec:
  progressDeadlineSeconds: 600
  replicas: {{.Values.replicaCount}}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: module-deployment
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: module-deployment
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
        - image: 228991124303.dkr.ecr.us-west-2.amazonaws.com/enschede/module1:0.0.16-SNAPSHOT
          env:
            - name: env1
              # harde configuratie in deployment (deze) file
              value: valueForEnv1
            - name: env2
              # configuratie uit config file, zie configMap.yaml
              valueFrom:
                configMapKeyRef:
                  name: module-my-config
                  key: myconfig.env2
            - name: env3
              valueFrom:
                secretKeyRef:
                  name: module-mysecret
                  key: env3
          imagePullPolicy: Always
          name: kubernetes-module
          resources:
            requests:
              # cpu: 200m
              memory: 768Mi
            limits:
              # cpu 400m
              memory: 1024Mi
          readinessProbe:
            httpGet:
              port: 8080
              path: /actuator/health
            failureThreshold: 5
            periodSeconds: 10
            initialDelaySeconds: 60
          livenessProbe:
            httpGet:
              port: 8080
              path: /actuator/health
            failureThreshold: 5
            periodSeconds: 10
            initialDelaySeconds: 60
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      terminationGracePeriodSeconds: 30
